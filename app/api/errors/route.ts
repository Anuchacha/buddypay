import { NextRequest, NextResponse } from 'next/server';
import { db } from '../../lib/firebase';
import { addDoc, collection } from 'firebase/firestore';

/**
 * API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Error Reports
 * POST /api/errors
 */
export async function POST(request: NextRequest) {
  try {
    const errorReport = await request.json();

    // Validate required fields
    if (!errorReport.message || !errorReport.fingerprint) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Rate limiting ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    // ‡πÉ‡∏ä‡πâ fingerprint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deduplication
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const enrichedErrorReport = {
      ...errorReport,
      serverTimestamp: new Date().toISOString(),
      userIP: request.headers.get('x-forwarded-for') || 
               request.headers.get('x-real-ip') || 
               'unknown',
      userAgent: request.headers.get('user-agent') || 'unknown',
      environment: process.env.NODE_ENV,
      appVersion: process.env.NEXT_PUBLIC_BUILD_VERSION || 'unknown',
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore (‡πÉ‡∏ô production ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ dedicated logging service)
    if (db) {
      try {
        await addDoc(collection(db, 'error_reports'), enrichedErrorReport);
      } catch (firestoreError) {
        // ‡∏ñ‡πâ‡∏≤ Firestore fail ‡πÉ‡∏´‡πâ log ‡πÑ‡∏ß‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ API fail
        if (process.env.NODE_ENV === 'development') {
          console.error('Failed to save to Firestore:', firestoreError);
        }
      }
    }

    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á External Services (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    try {
      await sendToExternalServices(enrichedErrorReport);
    } catch (externalError) {
      // Silent fail for external services
      if (process.env.NODE_ENV === 'development') {
        console.error('Failed to send to external services:', externalError);
      }
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Critical Errors ‡∏™‡πà‡∏á alert ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (errorReport.level === 'critical') {
      try {
        await sendCriticalAlert(enrichedErrorReport);
      } catch (alertError) {
        // Silent fail for alerts
      }
    }

    return NextResponse.json(
      { 
        success: true, 
        errorId: errorReport.id,
        message: 'Error report received successfully'
      },
      { status: 200 }
    );

  } catch (error) {
    // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Error API ‡∏•‡πà‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
    if (process.env.NODE_ENV === 'development') {
      console.error('Error API failed:', error);
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á External Services
 */
async function sendToExternalServices(errorReport: any): Promise<void> {
  const promises: Promise<any>[] = [];

  // ‡∏™‡πà‡∏á‡πÑ‡∏õ Webhook (‡πÄ‡∏ä‡πà‡∏ô Slack, Discord, Teams)
  if (process.env.ERROR_WEBHOOK_URL) {
    promises.push(
      fetch(process.env.ERROR_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: `üö® Error Report: ${errorReport.message}`,
          attachments: [{
            color: getLevelColor(errorReport.level),
            fields: [
              {
                title: 'Error Details',
                value: `**Level:** ${errorReport.level}\n**Component:** ${errorReport.context?.component}\n**Page:** ${errorReport.context?.page}\n**Count:** ${errorReport.count}`,
                short: false,
              },
              {
                title: 'Context',
                value: `**User:** ${errorReport.context?.userId || 'Anonymous'}\n**Session:** ${errorReport.context?.sessionId}\n**Build:** ${errorReport.appVersion}`,
                short: true,
              },
            ],
            footer: 'BuddyPay Error Monitoring',
            ts: Math.floor(Date.now() / 1000),
          }],
        }),
      })
    );
  }

  // ‡∏™‡πà‡∏á‡πÑ‡∏õ Third-party Error Tracking (‡πÄ‡∏ä‡πà‡∏ô Sentry)
  if (process.env.SENTRY_DSN) {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á integration ‡∏Å‡∏±‡∏ö Sentry
    promises.push(
      fetch('https://sentry.io/api/errors/', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.SENTRY_AUTH_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: errorReport.message,
          level: errorReport.level,
          tags: {
            component: errorReport.context?.component,
            page: errorReport.context?.page,
            environment: process.env.NODE_ENV,
          },
          extra: errorReport.context,
        }),
      })
    );
  }

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å promises ‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà block ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error)
  await Promise.allSettled(promises);
}

/**
 * ‡∏™‡πà‡∏á Critical Alert
 */
async function sendCriticalAlert(errorReport: any): Promise<void> {
  const promises: Promise<any>[] = [];

  // ‡∏™‡πà‡∏á SMS/Email alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Critical Errors
  if (process.env.CRITICAL_ALERT_WEBHOOK) {
    promises.push(
      fetch(process.env.CRITICAL_ALERT_WEBHOOK, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'critical_error',
          title: 'üî¥ CRITICAL ERROR ALERT',
          message: errorReport.message,
          details: {
            component: errorReport.context?.component,
            page: errorReport.context?.page,
            userId: errorReport.context?.userId,
            timestamp: errorReport.serverTimestamp,
            errorId: errorReport.id,
          },
          actions: [
            {
              text: 'View Error Dashboard',
              url: `${process.env.NEXT_PUBLIC_APP_URL}/admin/errors?filter=${errorReport.fingerprint}`,
            },
          ],
        }),
      })
    );
  }

  await Promise.allSettled(promises);
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏° Error Level
 */
function getLevelColor(level: string): string {
  switch (level) {
    case 'critical': return '#ff0000';
    case 'high': return '#ff6600';
    case 'medium': return '#ffcc00';
    case 'low': return '#33cc33';
    default: return '#666666';
  }
}

/**
 * GET endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error statistics (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
 */
export async function GET(request: NextRequest) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authorization (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ admin check)
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡πÅ‡∏•‡∏∞ admin role
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
    if (!db) {
      return NextResponse.json(
        { error: 'Database not available' },
        { status: 503 }
      );
    }

    // ‡∏™‡πà‡∏á basic stats (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ pagination ‡πÅ‡∏•‡∏∞ filtering)
    const stats = {
      message: 'Error statistics endpoint',
      note: 'Implementation depends on your specific needs and database structure',
    };

    return NextResponse.json(stats);

  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 