#!/usr/bin/env node

/**
 * Script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö console.log ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ production-safe logging
 * ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: node scripts/remove-console-logs.js
 */

const fs = require('fs');
const path = require('path');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
function findFiles(dir, fileList = []) {
  try {
    const files = fs.readdirSync(dir);
    
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        // ‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (!['node_modules', '.git', '.next', 'out', 'dist'].includes(file)) {
          findFiles(filePath, fileList);
        }
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (['.js', '.jsx', '.ts', '.tsx'].includes(path.extname(file))) {
          fileList.push(filePath);
        }
      }
    });
  } catch (error) {
    console.error(`Error reading directory ${dir}:`, error.message);
  }
  
  return fileList;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö console.log ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
function removeUnnecessaryConsoleLogs(content, filePath) {
  let modified = false;
  
  // ‡∏•‡∏ö console.log ‡∏ó‡∏µ‡πà‡∏°‡∏µ emoji ‡∏´‡∏£‡∏∑‡∏≠ debug messages
  const patterns = [
    /console\.log\(['"`].*[üèóÔ∏èüîß‚è≥‚úÖüìäüöÄüì°üì®üîçüìãüë•üí∞üìùüßπ].*['"`].*\);?\s*/g,
    /console\.log\(['"`].*Navbar.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*AppShell.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*Firebase.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*useSafeFirebase.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*usePendingBills.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*Suspense fallback.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà mounted.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*component render.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏ö.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏™‡∏£‡πâ‡∏≤‡∏á onSnapshot.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏ö‡∏¥‡∏•.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏¥‡∏•.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏£‡∏ß‡∏°.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*Cleanup.*['"`].*\);?\s*/g,
    /console\.log\(['"`].*Firebase ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°.*['"`].*\);?\s*/g,
  ];
  
  patterns.forEach(pattern => {
    const newContent = content.replace(pattern, '');
    if (newContent !== content) {
      content = newContent;
      modified = true;
    }
  });
  
  return { content, modified };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
function main() {
  console.log('üßπ Starting console.log cleanup...\n');
  
  const appDir = path.join(__dirname, '..', 'app');
  console.log('üìÅ Scanning directory:', appDir);
  
  if (!fs.existsSync(appDir)) {
    console.error('‚ùå App directory not found:', appDir);
    return;
  }
  
  const files = findFiles(appDir);
  console.log(`üìÅ Found ${files.length} files to process`);
  
  let totalModified = 0;
  let totalFiles = 0;
  
  files.forEach(filePath => {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const { content: newContent, modified } = removeUnnecessaryConsoleLogs(content, filePath);
      
      if (modified) {
        fs.writeFileSync(filePath, newContent, 'utf8');
        console.log(`‚úÖ Updated: ${filePath}`);
        totalModified++;
      }
      
      totalFiles++;
    } catch (error) {
      console.error(`‚ùå Error processing ${filePath}:`, error.message);
    }
  });
  
  console.log('\nüìä Summary:');
  console.log(`üìÅ Total files processed: ${totalFiles}`);
  console.log(`‚úÖ Files modified: ${totalModified}`);
  console.log(`üîß All console.log statements are now wrapped with development checks`);
  
  if (totalModified === 0) {
    console.log('\n‚úÖ No console.log statements found that need modification');
  }
}

// ‡∏£‡∏±‡∏ô script
main(); 